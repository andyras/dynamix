#!/bin/bash

# Function for formatted echo

function fecho {
# ISO 8601 time stamp
echo "### $(date -u +"%Y-%m-%dT%H:%M:%SZ") ${1}"
}

## INPUT PARAMETERS ##
. ./ins/parameters.in

function compile {
## COMPILE ##

fecho "compiling dynamix.cpp..."

# select a compiler
if command -v icpc &> /dev/null; then
  CPP=icpc
elif command -v g++ &> /dev/null;then
  CPP=g++
else
  CPP=c++
fi

cd build
if [[ $(uname) == "Darwin" ]]; then
  ncores=$(sysctl -n hw.ncpu)
elif [[ $(uname) == "Linux" ]]; then
  ncores=$(grep processor /proc/cpuinfo | wc -l)
else
  ncores=1
fi
if [ $debug == 1 ]; then
  make clean
  make -j ${ncores} CPP=$CPP DEBUG_MAKE="1"
else
  make -j ${ncores} CPP=$CPP
fi
if [ $? == 0 ] ; then
  fecho "done compiling!" && make install
  cd ..
else
  fecho "failed to compile :("
  exit
fi
}

function run {
## RUN THE PROGRAM! ##
fecho "running dynamix..."
./bin/dynamix
if [ $? == 0 ] ; then
  fecho "dynamix done!"
else
  fecho "dynamix did not run :("
  exit
fi
# move outputs
if [ justPlots == 0 ]; then
  [ -d outs ] && rm -rf outs
fi
mkdir -p outs
mv *.out outs/
# move plot files
[ -d figures ] && rm -rf figures/*
mkdir -p figures
chmod 755 *.plt
mv *.plt figures/
# remove progress file
rm -f progress.tmp

# analyze debug output
if [ $debug == 1 ]; then
  gprof ./bin/dynamix ./outs/gmon.out > analysis.txt
fi
}

function backup {
## BACK UP FILES ##
fecho "backing things up..."
durr=backup/dynamix_${1}
mkdir -p $durr
cp -rf * $durr &> /dev/null
fecho "all backed up!"
}

function plot {
if [ -d figures ]; then
  for plotfile in $(ls figures/*plt)
  do
    fecho "plotting ${plotfile}..."
    ./$plotfile
  done
else
  fecho "Nothing to plot."
fi
}

BACKUP=""
### This is where the script actually starts doing things. ###

fecho "dynamix run starting now..."
fecho ""
fecho ""

while getopts ":b:" opt; do
  case ${opt} in
    b)
      # specify name of backup directory
      do_backup=1
      BACKUP=${OPTARG}
      ;;
    \?)
      echo "Invalid option: -${OPTARG}" >&2
      exit 1
      ;;
    :)
      echo "Option -${OPTARG} requires an argument." >&2
      exit 1
      ;;
  esac
done


# if modules are available, try to load them.
if command -v module &> /dev/null; then
  module load intel
  module load cvode/2.7.0
fi

[ $do_compile == 1 ] && compile
[ $do_run == 1 ] && run
[ $do_plot == 1 ] && plot
[ $do_backup == 1 ] && backup ${BACKUP}

fecho "all done!"
fecho ""
fecho ""

#!/bin/bash
#$ -S /bin/bash
#$ -cwd
#$ -V


## FLAGS FOR RUN ##
    do_compile="n"
	do_run="n"
       do_plot="n"
      do_movie="y"
    do_cleanup="n"
do_fullcleanup="n"
     do_backup="n"

## INPUT PARAMETERS ##

# numerical parameters #
abstol=1.0e-10				# absolute tolerance
reltol=1.0e-10				# relative tolerance
tout=20000				# final time reached by solver (atomic units)
numsteps=60000				# number of timesteps
numOutputSteps=600			# number of output timesteps
# bulk parameters #
k_bandedge=0.00				# lower band edge of bulk conduction band
k_bandtop=0.00734996876			# upper band edge of bulk conduction band
#k_bandtop=0.036749843813		# upper band edge of bulk conduction band
Nk=100					# number of k states to have
# physical parameters #
temp=3e2				# temperature in Kelvin
# vibronic parameters #
N_vib=1					# number of vibronic states
E_vib=0.0036749843813			# vibrational energy
gkc=0.0					# g factor between k and c states
gkb=1.0					# g factor between k and b states
gbc=-1.0					# g factor between b and c states
gbb=0.0					# g factor between b states

function compile {
## COMPILE ##
 echo "### $(date) compiling dynamix.cpp..."
# g++ -Wall dynamix.cpp -O3 -o dynamix -lm -lsundials_cvode -lsundials_nvecserial && echo "### $(date) done compiling\!"
 g++ -Wall dynamix.cpp -o dynamix -I/home/andyras/bin/include -L/home/andyras/bin/lib -lm -lsundials_cvode -lsundials_nvecserial && echo "### $(date) done compiling!"
}

function compile_fail {
## IF COMPILATION FAILS, QUIT ##
 echo "### $(date) failed to compile :("
 exit
}

function run {
## RUN THE PROGRAM! ##
 echo "### $(date) running dynamix..."
 ./dynamix $abstol $reltol $tout $numsteps $numOutputSteps $k_bandedge $k_bandtop $Nk $temp $N_vib $E_vib $gkc $gkb $gbc $gbb && echo "### $(date) dynamix done\!" || echo "### $(date) dynamix did not run :("
 mkdir -p outs
 mv *.out outs/
}

function run_fail {
 echo "### failed to run dynamix :("
 exit
}

function plot {
## GENERATE POPULATION PLOTSCRIPT ##
 echo "### $(date) making plots..."
 echo "set terminal postscript eps  enhanced colour dashed lw 1 \"Helvetica\" 14
set output \"populations.eps\"
set multiplot
set style data lines
set style line 1 lw 2 lt 1 lc rgb \"red\"
set style line 2 lw 2 lt 1 lc rgb \"green\"
set style line 3 lw 2 lt 1 lc rgb \"blue\"
set style line 4 lw 2 lt 1 lc rgb \"purple\"
set style line 5 lw 2 lt 1 lc rgb \"dark-goldenrod\"
set style increment user
set key on lmargin
set lmargin 24
set border 10
set ytics scale 0.5
set ylabel \"Population \(a.u.\)\"
set xtics nomirror scale 0.5" > plot_pops
 # k and c population plot
 if [ $(($Nb)) == 0 ]
 then
  echo set size 1\, 1.0 \; set origin 0.0,0.0 \;  set xlabel \'Time \(fs\)\' >> plot_pops
  else
  echo set size 1\, 0.7\; set origin 0.0,0.3 >> plot_pops
 fi
 echo plot \'outs/tkprob.out\' using \(\$1\/41.34\):2 title \'k states\' lt 1, \\ >> plot_pops
 echo \'outs/tcprob.out\' using \(\$1\/41.34\):2 title \'c states\' lt 2 >> plot_pops
 # Bridge population plot
 if [ $((Nb)) -ge 1 ]
  then
   echo set size 1\, 0.3 \; set origin 0.0,0.0 >> plot_pops
 fi
 echo set xlabel \'Time \(fs\)\' \; set ylabel \'Bridge Pop. \(a.u.\)\' >> plot_pops
 [ $((Nb)) -ge 1 ] && echo -n plot \'outs/tbprob.out\' using \(\$1\/41.34\):2 title \'b1\' lt 3 >> plot_pops
 [ $((Nb)) -ge 2 ] && echo -n $', \\\n'\'outs/tbprob.out\' using \(\$1\/41.34\):3 title \'b2\' lt 4 >> plot_pops
 [ $((Nb)) -ge 3 ] && echo -n $', \\\n'\'outs/tbprob.out\' using \(\$1\/41.34\):4 title \'b3\' lt 5 >> plot_pops
 [ $((Nb)) -ge 4 ] && echo -n $', \\\n'\'outs/tbprob.out\' using \(\$1\/41.34\):5 title \'b4\' lt 1 >> plot_pops
 gnuplot 'plot_pops'
 [ "$do_fullcleanup" == 'y' ] && rm -f plot_pops
 # need to scale k_bandtop a bit so the plot fills properly
 new_k_bandtop=$(echo "scale=8; ($k_bandtop*1.00001)" | bc)
 echo "set terminal postscript eps enhanced colour
set output \"kprob.eps\"
set title \"Electron probability density in bulk conduction band\"
set pm3d map
set palette model XYZ rgbformulae 7,5,15
set ylabel \"Energy above band edge (a.u.)\"
set xlabel \"Time (a.u.)\"
set xrange [0:$tout]
set yrange [$k_bandedge:$new_k_bandtop]
set ytics scale 0
set xtics scale 0
set border 0
unset key
splot \"./outs/kprob.out\"" > plot_kpops
echo "
set terminal postscript eps enhanced colour
set output \"kprob.eps\"
set title \"Electron probability density in bulk conduction band\"
set border 0
set ytics scale 0
set xtics scale 0
set ylabel \"Energy above band edge \(a.u.\)\"
set xlabel \"Time (a.u.)\"
set xrange [0:$tout]
set yrange [$k_bandedge:$k_bandtop]
unset colorbox
set pm3d map
set palette model XYZ functions gray**0.45, gray**1.0, gray**1.0
splot './outs/kprob.out'" > plot_kpops
 gnuplot plot_kpops
 [ "$do_fullcleanup" == 'y' ] && rm -f plot_kpops && echo "### $(date) done plotting!"
}

function movie {
 ## GENERATE MOVIE MAKER ##
 timestep=$(echo "scale=4; ($tout/$numOutputSteps/41.34)" | bc)
 echo "### $(date) making movie maker..."
 cat outs/energy.out outs/allprob.out > temp.out
 cat temp.out | awk 'BEGIN {FS=" "}{for (i=1;i<=NF;i++){ arr[NR,i]=$i; if(big <= NF) big=NF; }} END { for (i=1;i<=big;i++) { for(j=1;j<=NR;j++) { printf("%s\t",arr[j,i]); } printf("\n"); }}' > transpose.out
 
 mkdir -p img
 rm -rf img/*

 max_pop=$(python findMaxZ.py outs/kprob.out)
 max_pop=$(echo "scale=4; ($max_pop*1.1)" | bc)
 
 echo "set term png truecolor size 800,800
unset key" > plot_movie

 xtics_string="nomirror scale 0,-1 ("	# starts the xtics string
 for (( i=0 ; i<=$tout ; i+=1000 ))	# builds the xtics string
 do
  time_au=$i
  time_fs=$(echo "scale=4; ($i/41.3414)" | bc)
  time_x=$time_au	# make this line reflect the units you want in the plot
  xtics_string=$xtics_string"\"$time_x\" $i, "
 done

 #for (( i=0; i<=$numOutputSteps; i++ ))
 for (( i=500; i<=515; i++ ))	# for testing movie making
 do
  time_fs=$(echo "scale=4; ($i*$tout/$numOutputSteps/41.3414)" | bc)
  time_au=$(echo "scale=4; ($i*$tout/$numOutputSteps)" | bc)
  time_n=$(echo "scale=4; ($time_au/$tout)" | bc)
  time_x=$time_au	# make this line reflect the units you want in the plot
  time_unit="a.u."	# make this line reflect the units you want in the plot
  foo=$(printf "%07d" $(($i)))
  xtix=$xtics_string"\"\" $time_x 1)"	# terminates the xtics string
  echo "set output \"img/${foo}.png\"
set multiplot

set origin 0,0
set size 1.1,0.5
set border 0
set ytics scale 0
set xtics scale 0
set ylabel \"Energy above band edge \(a.u.\)\"
set xlabel \"Time \($time_unit\)\"
set xrange [0:$tout]
set yrange [$k_bandedge:$k_bandtop]
unset colorbox
set pm3d map
set palette model XYZ functions gray**0.45, gray**1.0, gray**1.0
set arrow 1 from graph $time_n, graph -0.03 to graph $time_n, graph -0.01 nohead lw 3
set arrow 2 from graph $time_n, graph 1.01 to graph $time_n, graph 0.98 nohead lw 3
splot './outs/kprob.out'
unset arrow

set origin 0,0.5
set size 1,0.5
set border 15
set xtics scale 0 autofreq
set ytics scale 1 nomirror
set xlabel \"Energy above band edge \(a.u.\)\"
set ylabel \"Electron probability\"
set title \"Bulk populations at time = $time_x $time_unit\"
plot [$k_bandedge:$k_bandtop] [0:$max_pop] \"transpose.out\" every ::::$((Nk-1)) using 1:$((i+2)) with filledcurve
unset title

unset multiplot" >> plot_movie
 done
 echo "### $(date) done making movie maker!"
 echo "### $(date) making .png for each frame of the movie..."
 gnuplot plot_movie && echo "### $(date) done making .pngs!"
 
 echo "### $(date) making movie..."
 mencoder -really-quiet -ovc lavc -lavcopts vcodec=msmpeg4v2:vpass=1:$opt -mf type=png:fps=25 -nosound -o /dev/null mf://img/\*.png
 mencoder -really-quiet -ovc lavc -lavcopts vcodec=msmpeg4v2:vpass=1:$opt -mf type=png:fps=25 -nosound -o bulk_states.avi mf://img/\*.png
 [ "$do_cleanup" == 'y' ] && rm -rf img
 [ "$do_fullcleanup" == 'y' ] && rm -f plot_movie
 [ "$do_cleanup" == 'y' ] && rm -f temp.out
 [ "$do_cleanup" == 'y' ] && rm -f transpose.out
 [ "$do_cleanup" == 'y' ] && rm -f divx2pass.log
 echo "### $(date) done\! movie is bulk_states.avi"
}


function backup {
## BACK UP FILES ##
 echo "### $(date) backing things up..."
 durr=backup/dynamix_`date +%Y-%m-%d.%H.%M.%S`
 mkdir -p $durr
 cp -rf ins/ outs/ dynamix* total_dynamix $durr
 [ "$do_plot" == 'y' ] && cp *.eps $durr
 [ "$do_movie" == 'y' ] && cp bulk_states.avi $durr
 [ $(($Nb)) == 0 ] && rm -f $durr/outs/tbprob.out $durr/outs/Ibprob.out $durr/outs/bmax.out && ls $durr
 echo "### $(date) all backed up\!"
}

Nb=`wc -l "ins/b_energies.in" | awk '{print $1}'`

echo "### $(date) dynamix run starting now..."
echo "###"
echo "###"

# [ "$do_compile" == 'y' ] && compile
if [ "$do_compile" == 'y' ] ; then
 compile || compile_fail
fi
if [ "$do_run" == 'y' ] ; then
 run || run_fail
fi
[ "$do_plot" == 'y' ] && plot
[ "$do_movie" == 'y' ] && movie
[ "$do_backup" == 'y' ] && backup

echo "### $(date) all done\!"
echo "###"
echo "###"
